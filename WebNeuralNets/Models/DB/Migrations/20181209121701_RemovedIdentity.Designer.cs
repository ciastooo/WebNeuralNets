// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebNeuralNets.Models.DB;

namespace WebNeuralNets.Models.DB.Migrations
{
    [DbContext(typeof(WebNeuralNetDbContext))]
    [Migration("20181209121701_RemovedIdentity")]
    partial class RemovedIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebNeuralNets.Models.DB.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LanguageCode");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Dendrite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NextNeuronId");

                    b.Property<int>("PreviousNeuronId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("NextNeuronId");

                    b.HasIndex("PreviousNeuronId");

                    b.ToTable("Dendrites");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Iteration");

                    b.Property<int>("NeuralNetId");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetId");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.NeuralNet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Training");

                    b.Property<int>("TrainingIterations");

                    b.Property<double>("TrainingRate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NeuralNets");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Neuron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bias");

                    b.Property<int>("LayerId");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.ToTable("Neurons");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.TrainingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NeuralNetId");

                    b.Property<string>("TrainingSet");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetId");

                    b.ToTable("TrainingData");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.TranslationValue", b =>
                {
                    b.Property<int>("LanguageCode");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("LanguageCode", "Key");

                    b.ToTable("TranslationValues");
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Dendrite", b =>
                {
                    b.HasOne("WebNeuralNets.Models.DB.Neuron", "NextNeuron")
                        .WithMany("PreviousDendrites")
                        .HasForeignKey("NextNeuronId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebNeuralNets.Models.DB.Neuron", "PreviousNeuron")
                        .WithMany("NextDendrites")
                        .HasForeignKey("PreviousNeuronId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Layer", b =>
                {
                    b.HasOne("WebNeuralNets.Models.DB.NeuralNet", "NeuralNet")
                        .WithMany("Layers")
                        .HasForeignKey("NeuralNetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.NeuralNet", b =>
                {
                    b.HasOne("WebNeuralNets.Models.DB.ApplicationUser", "User")
                        .WithMany("NeuralNets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.Neuron", b =>
                {
                    b.HasOne("WebNeuralNets.Models.DB.Layer", "Layer")
                        .WithMany("Neurons")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebNeuralNets.Models.DB.TrainingData", b =>
                {
                    b.HasOne("WebNeuralNets.Models.DB.NeuralNet", "NeuralNet")
                        .WithMany("TrainingData")
                        .HasForeignKey("NeuralNetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
